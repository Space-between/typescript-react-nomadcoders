만약 타입스크립트에서 타입의 표현식과 선언문에 대한 경고(타입지정하는 것을 안했으면 안했다고 알려주는 에러)를 끄고 싶다면
tsconfig.json에서 compilerOptions객체안에 "noImplicitAny": false이것을 입력해주면 된다.

react+타입스크립트 조합으로 프로젝트를 만들어서 작업하다가 npm 라이브러리를 다운받을 경우에는 일반적으로 react에서 많이 사용했던 방식인 npm i styled-components이런식으로 다운받으면 안된다.
react는 타입스크립트가 아니라 자바스크립트로 만들어져 있기때문에 타입스크립트가 읽지 못한다. 그래서 타입스크립트 전용으로 만들어진 npm i @types/styled-components 이렇게 다운받아야 한다.
npm 라이브러리 앞에 @types/이것을 붙여야 한다. 모든 npm 라이브러리가 @types/이것을 붙인다고 다 된다고 장담할 수 없으니까 npm 라이브러리에 따라서 미리 구글링해보기
(https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types 참조), (https://joshua1988.github.io/ts/config/types.html#types-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%9E%80 참조)

만약 다운받으려는 npm 라이브러리가 타입스크립트를 지원하지 않는다면, 다시 말해서 다운받으려는 npm 라이브러리중에 @types/가 붙어있는 라이브러리가 존재하지 않는다면 
tsconfig.json에서 compilerOptions객체안에 "noImplicitAny": false이것을 입력해주면 된다.



----------------------------------------------------------------------------------------------
state를 사용해서 만든 코드


import { timeStamp } from 'console';
import React, { Component } from 'react';

interface IState {
  counter: number; //state안에 있는 counter의 타입을  number로 지정한 것이다. 
}

class App extends Component<{}, IState> { //Component옆에 있는 <>여기안에다 interface로 타입의 형식을 지정한 객체를 넣어서 prop와 state의 타입을 지정할 수 있다. 첫번쨰 인자가 prop이고 두번째 인자가 state이다. 
  state = {
    counter: 0
  };
  render() {
    const { counter } = this.state;
    return (
      <div>{counter} <button onClick={this.add}>Add</button></div>
    );
  }
  add = () => {
    this.setState(prev => {
      return {
        counter: prev.counter + 1
      }
    })
  }
}

export default App;


----------------------------------------------------------------------------------------------

기본적으로 모든 React Component는 children이라고 하는 props을 가질 수 있다. 
근데 이렇게 children이라는 props를 갖을려면 React Component의 타입을 : React.FunctionComponent이렇게 지정해야 한다.